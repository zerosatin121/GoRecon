// package main..............................................
// import (
// 	"bufio"
// 	"fmt"
// 	"os"
// 	"os/exec"
// )
// func main() {
// 	if len(os.Args) != 2 {
// 		fmt.Println("Usage: gorecon <domain>")
// 		os.Exit(1)
// 	}
// 	domain := os.Args[1]
// 	fmt.Printf("Running httpx for: %s\n\n", domain)
// 	// Prepare the command: httpx -sc -ip -silent
// 	cmd := exec.Command("httpx", "-sc", "-ip","-title","-server","-silent")
// 	// Setup input and output pipes
// 	stdin, _ := cmd.StdinPipe() // variable to store the pipe value.    
// 	stdout, err := cmd.StdoutPipe() // gets the piped value from terminal.
// 	if err != nil {
// 		fmt.Println("Error getting output:", err) //if there is  an error print the error 
// 		return
// 	}
// 	// Start the command
// 	if err := cmd.Start(); err != nil {
// 		fmt.Println("Error starting httpx:", err) // if cmd doesn't start throw and error .
// 		return
// 	}
// 	// Write the domain into stdin of httpx
// 	stdin.Write([]byte(domain + "\n"))
// 	stdin.Close()
// 	// Read httpx output line by line
// 	scanner := bufio.NewScanner(stdout)
// 	for scanner.Scan() {
// 		fmt.Println(scanner.Text())
// 	}
// 	// Handle any scanner errors
// 	if err := scanner.Err(); err != nil {
// 		fmt.Println("Error reading output:", err)
// 	}
// 	cmd.Wait()
// }......................................................................
// package main
// import (
//     "bufio"
//     "fmt"
//     "os"
//     "os/exec"
// )
// func main() {
//     if len(os.Args) != 2 {
//         fmt.Println("Usage: gorecon <domain>")
//         os.Exit(1)
//         }
//     domain := os.Args[1]
//     fmt.Printf("🔎 Recon for: %s\n\n", domain)

//     // Step 1: subfinder -d <domain> -silent
//     subfinder := exec.Command("subfinder", "-d", domain, "-silent")
//     subfinderOut, err := subfinder.StdoutPipe()
//     if err != nil {
//         fmt.Println("❌ Failed to setup subfinder:", err)
//         return
//     }
//     if err := subfinder.Start(); err != nil {
//         fmt.Println("❌ Error starting subfinder:", err)
//         return
//     }
//     // Step 2: httpx -sc -ip -title -server -silent
//     httpx := exec.Command("httpx", "-sc", "-ip", "-title", "-server", "-silent")
//     httpxIn, _ := httpx.StdinPipe()
//     httpxOut, err := httpx.StdoutPipe()
//     if err != nil {
//         fmt.Println("❌ Failed to setup httpx:", err)
//         return
//     }
//     if err := httpx.Start(); err != nil {
//         fmt.Println("❌ Error starting httpx:", err)
//         return
//     }
//     // Feed subfinder output into httpx stdin
//     go func() {
//         scanner := bufio.NewScanner(subfinderOut)
//         for scanner.Scan() {
//             line := scanner.Text()
//             if line != "" {
//                 httpxIn.Write([]byte(line + "\n"))
//             }
//         }
//         httpxIn.Close()
//     }()
//     // Print httpx output
//     scanner := bufio.NewScanner(httpxOut)
//     for scanner.Scan() {
//         fmt.Println(scanner.Text())
//     }
//     // Wait for both to finish
//     subfinder.Wait()
//     httpx.Wait()
// }
.......
<!-- <!-- <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>gorecon — {{.Domain}}</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
   </head>

<body class="bg-gray-900 text-gray-100 font-mono">
    <script>
        // Auto-refresh every 5s until we have data
        setInterval(() => {
            if (document.querySelectorAll(".sub-list div").length <= 1 &&
                document.querySelectorAll(".httpx-list div").length <= 1) {
                window.location.reload();
            }
        }, 5000);
    </script>
      
    <div class="max-w-7xl mx-auto px-4 py-6">
        <form action="/run" class="mb-4 flex gap-2">
            <input type="text" name="domain" placeholder="example.com"
                class="bg-gray-800 px-3 py-2 rounded border border-gray-700 w-64" />
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded">
                🚀 Run Scan
            </button>
        </form>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <h2 class="text-lg mb-2 font-bold text-green-400">🔍 Subdomains</h2>
                <div class="bg-gray-800 p-3 rounded h-[400px] overflow-y-auto text-sm">
                    {{range .Subdomains}}<div>{{.}}</div>{{else}}<div class="text-gray-400">No results yet.</div>{{end}}
                </div>
            </div>
            <div>
                <h2 class="text-lg mb-2 font-bold text-cyan-400">🌐 httpx Results</h2>
                <div class="bg-gray-800 p-3 rounded h-[400px] overflow-y-auto text-sm">
                    {{range .HttpxOutput}}<div>{{.}}</div>{{else}}<div class="text-gray-400">No results yet.</div>
                    {{end}}
                </div>
            </div>
        </div>
    </div>
</body>

</html> -->

<!-- <!DOCTYPE html> -->
<!-- <html lang="en" class="dark">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>gorecon — {{.Domain}}</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
</head>

<body class="bg-gray-900 text-gray-100 font-mono">
    <script>
        // Auto-refresh every 5s if no scan results yet
        setInterval(() => {
            const subs = document.querySelectorAll(".sub-list div");
            const httpx = document.querySelectorAll(".httpx-list div");

            const subReady = subs.length > 1 || (subs[0] && subs[0].innerText !== "No results yet.");
            const httpxReady = httpx.length > 1 || (httpx[0] && httpx[0].innerText !== "No results yet.");

            if (!subReady || !httpxReady) {
                console.log("🔁 Waiting for results... refreshing");
                window.location.reload();
            }
        }, 5000);
    </script>

    <div class="max-w-7xl mx-auto px-4 py-6">
        <form action="/run" class="mb-4 flex gap-2">
            <input type="text" name="domain" placeholder="example.com"
                class="bg-gray-800 px-3 py-2 rounded border border-gray-700 w-64" />
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded">
                🚀 Run Scan
            </button>
        </form>

        <div class="text-sm text-gray-400 mb-4">
            <span class="opacity-70">Last scan:</span> {{.Timestamp}}
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <h2 class="text-lg mb-2 font-bold text-green-400">🔍 Subdomains</h2>
                <div class="sub-list bg-gray-800 p-3 rounded h-[400px] overflow-y-auto text-sm">
                    {{range .Subdomains}}<div>{{.}}</div>{{else}}<div class="text-gray-400">No results yet.</div>{{end}}
                </div>
            </div>
            <div>
                <h2 class="text-lg mb-2 font-bold text-cyan-400">🌐 httpx Results</h2>
                <div class="httpx-list bg-gray-800 p-3 rounded h-[400px] overflow-y-auto text-sm">
                    {{range .HttpxOutput}}<div>{{.}}</div>{{else}}<div class="text-gray-400">No results yet.</div>
                    {{end}}
                </div>
            </div>
        </div>
    </div>
</body>

</html> -->
<!-- <!DOCTYPE html>
<html lang="en" class="dark">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>gorecon — {{.Domain}}</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
</head>

<body class="bg-gray-900 text-gray-100 font-mono">
    <script>
        setInterval(() => {
            const sub = document.querySelector(".sub-list")?.innerText || "";
            const httpx = document.querySelector(".httpx-list")?.innerText || "";
            if (sub.includes("No results yet") && httpx.includes("No results yet")) {
                console.log("⏳ Waiting for scan results...");
                window.location.reload();
            }
        }, 5000);
    </script>

    <div class="max-w-7xl mx-auto px-4 py-6">
        <form action="/run" class="mb-4 flex gap-2">
            <input type="text" name="domain" placeholder="example.com" value="{{.Domain}}"
                class="bg-gray-800 px-3 py-2 rounded border border-gray-700 w-64" />
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded">
                🚀 Run Scan
            </button>
        </form>

        {{if .Domain}}
        <div class="text-sm text-gray-400 mb-4">
            <span class="opacity-70">Last scan for:</span> <span class="text-white">{{.Domain}}</span>
            — {{.Timestamp}}
        </div>
        {{end}}

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <h2 class="text-lg mb-2 font-bold text-green-400">🔍 Subdomains</h2>
                <div class="sub-list bg-gray-800 p-3 rounded h-[400px] overflow-y-auto text-sm">
                    {{range .Subdomains}}<div>{{.}}</div>{{else}}<div class="text-gray-400">No results yet.</div>{{end}}
                </div>
            </div>
            <div>
                <h2 class="text-lg mb-2 font-bold text-cyan-400">🌐 httpx Results</h2>
                <div class="httpx-list bg-gray-800 p-3 rounded h-[400px] overflow-y-auto text-sm">
                    {{range .HttpxOutput}}<div>{{.}}</div>{{else}}<div class="text-gray-400">No results yet.</div>
                    {{end}}
                </div>
            </div>
        </div>
    </div>
</body>

</html> --> -->
<!-- <!DOCTYPE html>
<html lang="en" class="dark">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>gorecon — {{.Domain}}</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <style>
        .terminal-box {
            background-color: #0d0d0d;
            color: #00ff99;
            font-family: 'Fira Code', monospace;
            border: 1px solid #00ff99;
            padding: 1rem;
            max-height: 400px;
            overflow-y: auto;
            box-shadow: 0 0 10px #00ff99;
        }

        .terminal-box::before {
            content: "─[ logs ]";
            display: block;
            color: #60ffca;
            margin-bottom: 0.5rem;
        }
    </style>
</head>

<body class="bg-black text-white font-mono">

    <script>
        setInterval(() => {
            fetch("/logs")
                .then(res => res.text())
                .then(log => {
                    document.getElementById("log-box").innerText = log;
                });
        }, 2000);
    </script>

    <div class="max-w-7xl mx-auto px-4 py-6">
        <form action="/run" class="mb-4 flex gap-2">
            <input type="text" name="domain" placeholder="example.com" value="{{.Domain}}"
                class="bg-gray-900 px-3 py-2 rounded border border-green-500 text-green-300 w-64" />
            <button type="submit" class="bg-green-700 hover:bg-green-600 px-4 py-2 rounded text-white">
                🧠 Start Scan
            </button>
        </form>

        <div class="text-sm text-gray-400 mb-4">
            <span>Last scanned:</span> <strong class="text-white">{{.Domain}}</strong> — {{.Timestamp}}
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <h2 class="text-lg mb-2 text-green-400 font-bold">🔎 Subdomains</h2>
                <div class="bg-gray-900 p-3 rounded h-[400px] overflow-y-auto text-green-300 text-sm">
                    {{range .Subdomains}}<div>{{.}}</div>{{else}}<div class="text-gray-600">No results yet.</div>{{end}}
                </div>
            </div>

            <div>
                <h2 class="text-lg mb-2 text-cyan-400 font-bold">📟 Logs</h2>
                <div id="log-box" class="terminal-box text-xs"></div>
            </div>
        </div>
    </div>
</body>

</html> -->
.......
// package main

// import (
//     "bufio"
//     "log"
//     "net/http"
//     "os/exec"
//     "strings"
//     "sync"
//     "time"
//     "fmt"

//     "github.com/gin-gonic/gin"
// )

// type ReconData struct {
//     Domain      string
//     Subdomains  []string
//     HttpxOutput []string
//     Timestamp   string
// }

// var data ReconData
// var mu sync.Mutex

// // Log buffer for in-app terminal feed
// var logs []string
// var logMu sync.Mutex

// func appendLog(line string) {
//     log.Println(line)
//     logMu.Lock()
//     defer logMu.Unlock()
//     logs = append(logs, time.Now().Format("15:04:05")+" ➜ "+line)
//     if len(logs) > 200 {
//         logs = logs[len(logs)-200:]
//     }
// }

// func main() {
//     r := gin.Default()
//     r.Static("/static", "./static")
//     r.LoadHTMLGlob("templates/*")

//     r.GET("/", homeHandler)
//     r.GET("/run", runHandler)
//     r.GET("/logs", logsHandler)

//     appendLog("🌐 gorecon launched on http://127.0.0.1:8080")
//     r.Run(":8080")
// }

// func homeHandler(c *gin.Context) {
//     mu.Lock()
//     defer mu.Unlock()

//     logMu.Lock()
//     currentLogs := strings.Join(logs, "\n")
//     logMu.Unlock()

//     c.HTML(http.StatusOK, "index.html", gin.H{
//         "Domain":      data.Domain,
//         "Subdomains":  data.Subdomains,
//         "HttpxOutput": data.HttpxOutput,
//         "Timestamp":   data.Timestamp,
//         "Logs":        currentLogs,
//     })
// }

// func runHandler(c *gin.Context) {
//     domain := c.Query("domain")
//     if domain == "" {
//         c.String(http.StatusBadRequest, "Missing domain")
//         return
//     }

//     appendLog("🎯 Starting scan for " + domain)
//     go runRecon(domain)
//     c.Redirect(http.StatusSeeOther, "/")
// }

// func logsHandler(c *gin.Context) {
//     logMu.Lock()
//     defer logMu.Unlock()
//     c.String(http.StatusOK, strings.Join(logs, "\n"))
// }

// func runRecon(domain string) {
//     var subs, httpxResults []string

//     cmd := exec.Command("subfinder", "-d", domain, "-silent")
//     stdout, err := cmd.StdoutPipe()
//     if err != nil {
//         appendLog("❌ subfinder error: " + err.Error())
//         return
//     }
//     if err := cmd.Start(); err != nil {
//         appendLog("❌ failed to start subfinder: " + err.Error())
//         return
//     }
//     scan := bufio.NewScanner(stdout)
//     for scan.Scan() {
//         sub := scan.Text()
//         subs = append(subs, sub)
//         appendLog("➕ subfinder: " + sub)
//     }
//     cmd.Wait()

//     appendLog("📦 Found " + itoa(len(subs)) + " subdomains")

//     httpx := exec.Command("httpx", "-sc", "-ip", "-title", "-server", "-silent")
//     in, _ := httpx.StdinPipe()
//     out, _ := httpx.StdoutPipe()
//     httpx.Start()

//     go func() {
//         for _, sub := range subs {
//             in.Write([]byte(sub + "\n"))
//         }
//         in.Close()
//     }()

//     scanner := bufio.NewScanner(out)
//     for scanner.Scan() {
//         line := scanner.Text()
//         httpxResults = append(httpxResults, line)
//         appendLog("🌐 httpx: " + line)
//     }
//     httpx.Wait()

//     mu.Lock()
//     data = ReconData{
//         Domain:      domain,
//         Subdomains:  subs,
//         HttpxOutput: httpxResults,
//         Timestamp:   time.Now().Format("02 Jan 2006 15:04:05"),
//     }
//     mu.Unlock()

//     appendLog("✅ Scan complete for " + domain + " with " + itoa(len(httpxResults)) + " results")
// }

// func itoa(i int) string {
//     return fmt.Sprintf("%d", i)
// }

package main

import (
    "bufio"
    "fmt"
    "html/template"
    "log"
    "net/http"
    "os/exec"
    "regexp"
    "strings"
    "sync"
    "time"

    "github.com/gin-gonic/gin"
)

type ReconData struct {
    Domain      string
    Subdomains  []string
    HttpxOutput []string
    Timestamp   string
    Scanning    bool
}

var data ReconData
var mu sync.Mutex

var logs []string
var logMu sync.Mutex

var ansiStrip = regexp.MustCompile(`\x1b

\[[0-9;]*m`)

func appendLog(line string) {
    log.Println(line)
    logMu.Lock()
    defer logMu.Unlock()
    entry := fmt.Sprintf("%s ➜ %s", time.Now().Format("15:04:05"), line)
    logs = append(logs, entry)
    if len(logs) > 500 {
        logs = logs[len(logs)-500:]
    }
}

func main() {
    r := gin.Default()

    r.SetFuncMap(template.FuncMap{
        "split": strings.Split,
    })
    r.LoadHTMLGlob("templates/*")

    r.Static("/static", "./static")
    r.GET("/", homeHandler)
    r.GET("/run", runHandler)
    r.GET("/logs", logsHandler)
    r.GET("/status", statusHandler)
    r.GET("/data", dataHandler)

    appendLog("🌐 gorecon dashboard ready at http://127.0.0.1:8080")
    r.Run(":8080")
}

func homeHandler(c *gin.Context) {
    mu.Lock()
    currentData := data
    mu.Unlock()

    c.HTML(http.StatusOK, "index.html", gin.H{
        "Domain":      currentData.Domain,
        "Subdomains":  currentData.Subdomains,
        "HttpxOutput": currentData.HttpxOutput,
        "Timestamp":   currentData.Timestamp,
        "Scanning":    currentData.Scanning,
    })
}

func runHandler(c *gin.Context) {
    domain := c.Query("domain")
    if domain == "" {
        c.String(http.StatusBadRequest, "Missing domain")
        return
    }

    mu.Lock()
    data = ReconData{
        Domain:   domain,
        Scanning: true,
    }
    mu.Unlock()

    appendLog("🎯 Starting scan for " + domain)
    go runRecon(domain)
    c.Status(http.StatusOK)
}

func logsHandler(c *gin.Context) {
    logMu.Lock()
    defer logMu.Unlock()
    c.String(http.StatusOK, strings.Join(logs, "\n"))
}

func statusHandler(c *gin.Context) {
    mu.Lock()
    defer mu.Unlock()
    c.JSON(http.StatusOK, gin.H{
        "scanning": data.Scanning,
    })
}

func dataHandler(c *gin.Context) {
    mu.Lock()
    defer mu.Unlock()
    c.JSON(http.StatusOK, data)
}

func runRecon(domain string) {
    var subs []string
    var httpxLines []string

    cmd := exec.Command("subfinder", "-d", domain, "-silent")
    subOut, err := cmd.StdoutPipe()
    if err != nil {
        appendLog("❌ subfinder pipe error: " + err.Error())
        return
    }
    if err := cmd.Start(); err != nil {
        appendLog("❌ Failed to start subfinder: " + err.Error())
        return
    }

    scanner := bufio.NewScanner(subOut)
    for scanner.Scan() {
        subs = append(subs, scanner.Text())
    }
    cmd.Wait()
    appendLog(fmt.Sprintf("📦 Subfinder found %d subdomains", len(subs)))

    httpx := exec.Command("httpx", "-sc", "-ip", "-title", "-server", "-silent")
    httpxIn, _ := httpx.StdinPipe()
    httpxOut, _ := httpx.StdoutPipe()
    httpx.Start()

    go func() {
        for _, sub := range subs {
            httpxIn.Write([]byte(sub + "\n"))
        }
        httpxIn.Close()
    }()

    scan := bufio.NewScanner(httpxOut)
    for scan.Scan() {
        clean := ansiStrip.ReplaceAllString(scan.Text(), "")
        httpxLines = append(httpxLines, clean)
    }
    httpx.Wait()
    appendLog(fmt.Sprintf("🌐 httpx identified %d live hosts", len(httpxLines)))

    mu.Lock()
    data = ReconData{
        Domain:      domain,
        Subdomains:  subs,
        HttpxOutput: httpxLines,
        Timestamp:   time.Now().Format("02 Jan 2006 15:04:05"),
        Scanning:    false,
    }
    mu.Unlock()

    appendLog("✅ Scan finished for " + domain)
}


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>gorecon</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            background-color: #0e0e0e;
            color: #00ff88;
            font-family: 'Fira Code', monospace;
        }

        .terminal {
            background: #111;
            border: 1px solid #33ff33;
            padding: 1rem;
            font-size: 0.75rem;
            overflow-y: auto;
            height: 200px;
            white-space: pre-wrap;
        }
    </style>
</head>

<body>
    <div class="max-w-7xl mx-auto px-4 py-6">
        <form id="scanForm" class="mb-4 flex gap-2">
            <input id="domainInput" type="text" placeholder="example.com"
                class="bg-black border border-green-500 px-3 py-2 rounded w-64 text-green-300" />
            <button type="submit" class="bg-green-700 hover:bg-green-600 px-4 py-2 rounded text-white">
                🚀 Start Scan
            </button>
        </form>

        <div id="statusText" class="text-sm text-gray-400 mb-4">No scan yet.</div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
                <h2 class="text-green-400 font-bold mb-2">🔍 Subfinder</h2>
                <div id="subList"
                    class="bg-black border border-green-500 p-3 rounded h-[300px] overflow-y-auto text-sm text-green-300">
                    <div>No data.</div>
                </div>
            </div>
            <div>
                <h2 class="text-cyan-400 font-bold mb-2">🌐 httpx Results</h2>
                <div id="httpxList"
                    class="bg-black border border-cyan-500 p-3 rounded h-[300px] overflow-y-auto text-sm text-cyan-300">
                    <div>No data.</div>
                </div>
            </div>
        </div>

        <div>
            <h2 class="text-yellow-400 font-bold mb-2">📟 Logs</h2>
            <div id="log-box" class="terminal"></div>
        </div>
    </div>

    <script>
        const domainInput = document.getElementById("domainInput");
        const statusText = document.getElementById("statusText");
        const subList = document.getElementById("subList");
        const httpxList = document.getElementById("httpxList");

        document.getElementById("scanForm").addEventListener("submit", (e) => {
            e.preventDefault();
            const domain = domainInput.value.trim();
            if (!domain) return;
            fetch(`/run?domain=${encodeURIComponent(domain)}`).then(() => {
                statusText.innerText = `⏳ Scanning: ${domain}...`;
                domainInput.disabled = true;
            });
        });

        function updateLogs() {
            fetch("/logs")
                .then(res => res.text())
                .then(text => {
                    document.getElementById("log-box").innerText = text;
                });
        }

        function updateData() {
            fetch("/data")
                .then(res => res.json())
                .then(data => {
                    if (data.Scanning) {
                        statusText.innerText = `⏳ Scanning: ${data.Domain}...`;
                    } else if (data.Timestamp) {
                        statusText.innerText = `✅ Done: ${data.Domain} @ ${data.Timestamp}`;
                        domainInput.disabled = false;
                    }

                    subList.innerHTML = data.Subdomains?.length
                        ? data.Subdomains.map(s => `<div>${s}</div>`).join("")
                        : `<div class="text-gray-500">No subdomains found.</div>`;

                        httpxList.innerHTML = data.HttpxOutput?.length
                        ? data.HttpxOutput.map(line => {
                            const match = line.match(/

                            \[(\d{ 3}) \]

/);
                                const code = match ? match[1] : "???";
                                const url = line.split(" [")[0];
                                let badge = "bg-gray-700";
                                if (code.startsWith("2")) badge = "bg-green-600";
                                else if (code.startsWith("3")) badge = "bg-yellow-500";
                                else if (code.startsWith("4")) badge = "bg-red-600";
                                else if (code.startsWith("5")) badge = "bg-purple-600";

                                return `
        <div class="flex justify-between mb-1">
          <span class="truncate">${url}</span>
          <span class="text-xs px-2 py-0.5 rounded text-white ${badge}">${code}</span>
        </div>`;
                            }).join("")
  : `<div class="text-gray-500">No live hosts found.</div>`;
        });
    }

        setInterval(() => {
            updateLogs();
            updateData();
        }, 2000);
    </script>
</body>

</html>




....<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>gorecon</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            background-color: #0e0e0e;
            color: #00ff88;
            font-family: 'Fira Code', monospace;
        }

        .terminal {
            background: #111;
            border: 1px solid #33ff33;
            padding: 1rem;
            font-size: 0.75rem;
            overflow-y: auto;
            height: 200px;
            white-space: pre-wrap;
        }
    </style>
</head>

<body>
    <div class="max-w-7xl mx-auto px-4 py-6">
        <form id="scanForm" class="mb-4 flex gap-2">
            <input id="domainInput" type="text" placeholder="example.com"
                class="bg-black border border-green-500 px-3 py-2 rounded w-64 text-green-300" />
            <button type="submit" class="bg-green-700 hover:bg-green-600 px-4 py-2 rounded text-white">
                🚀 Start Scan
            </button>
        </form>

        <div id="statusText" class="text-sm text-gray-400 mb-4">No scan yet.</div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
                <h2 class="text-green-400 font-bold mb-2">🔍 Subfinder</h2>
                <div id="subList"
                    class="bg-black border border-green-500 p-3 rounded h-[300px] overflow-y-auto text-sm text-green-300">
                    <div>No data.</div>
                </div>
            </div>
            <div>
                <h2 class="text-cyan-400 font-bold mb-2">🌐 httpx Results</h2>
                <div id="httpxList"
                    class="bg-black border border-cyan-500 p-3 rounded h-[300px] overflow-y-auto text-sm text-cyan-300">
                    <div>No data.</div>
                </div>
            </div>
        </div>

        <div>
            <h2 class="text-yellow-400 font-bold mb-2">📟 Logs</h2>
            <div id="log-box" class="terminal"></div>
        </div>
    </div>

    <script>
        const domainInput = document.getElementById("domainInput");
        const statusText = document.getElementById("statusText");
        const subList = document.getElementById("subList");
        const httpxList = document.getElementById("httpxList");

        document.getElementById("scanForm").addEventListener("submit", (e) => {
            e.preventDefault();
            const domain = domainInput.value.trim();
            if (!domain) return;
            fetch(`/run?domain=${encodeURIComponent(domain)}`).then(() => {
                statusText.innerText = `⏳ Scanning: ${domain}...`;
                domainInput.disabled = true;
            });
        });

        function updateLogs() {
            fetch("/logs")
                .then(res => res.text())
                .then(text => {
                    document.getElementById("log-box").innerText = text;
                });
        }

        function updateData() {
            fetch("/data")
                .then(res => res.json())
                .then(data => {
                    if (data.Scanning) {
                        statusText.innerText = `⏳ Scanning: ${data.Domain}...`;
                    } else if (data.Timestamp) {
                        statusText.innerText = `✅ Done: ${data.Domain} @ ${data.Timestamp}`;
                        domainInput.disabled = false;
                    }

                    subList.innerHTML = data.Subdomains?.length
                        ? data.Subdomains.map(s => `<div>${s}</div>`).join("")
                        : `<div class="text-gray-500">No subdomains found.</div>`;

                    httpxList.innerHTML = data.HttpxOutput?.length
                        ? data.HttpxOutput.map(line => `<div>${line}</div>`).join("")
                        : `<div class="text-gray-500">No live hosts found.</div>`;
                });
        }

        setInterval(() => {
            updateLogs();
            updateData();
        }, 2000);
    </script>
</body>

</html>
.....
package main

import (
    "bufio"
    "fmt"
    "log"
    "net/http"
    "os/exec"
    "strings"
    "sync"
    "time"

    "github.com/gin-gonic/gin"
)

type ReconData struct {
    Domain      string
    Subdomains  []string
    HttpxOutput []string
    Timestamp   string
    Scanning    bool
}

var data ReconData
var mu sync.Mutex

var logs []string
var logMu sync.Mutex

func appendLog(line string) {
    log.Println(line)
    logMu.Lock()
    defer logMu.Unlock()
    entry := fmt.Sprintf("%s ➜ %s", time.Now().Format("15:04:05"), line)
    logs = append(logs, entry)
    if len(logs) > 500 {
        logs = logs[len(logs)-500:]
    }
}

func main() {
    r := gin.Default()
    r.LoadHTMLGlob("templates/*")
    r.Static("/static", "./static")

    r.GET("/", func(c *gin.Context) {
        c.HTML(http.StatusOK, "index.html", nil)
    })
    r.GET("/run", runHandler)
    r.GET("/logs", logsHandler)
    r.GET("/data", dataHandler)

    appendLog("🌐 gorecon dashboard ready at http://127.0.0.1:8080")
    r.Run(":8080")
}

func runHandler(c *gin.Context) {
    domain := c.Query("domain")
    if domain == "" {
        c.String(http.StatusBadRequest, "Missing domain")
        return
    }

    mu.Lock()
    data = ReconData{
        Domain:   domain,
        Scanning: true,
    }
    mu.Unlock()

    appendLog("🎯 Starting scan for " + domain)
    go runRecon(domain)
    c.Status(http.StatusOK)
}

func logsHandler(c *gin.Context) {
    logMu.Lock()
    defer logMu.Unlock()
    c.String(http.StatusOK, strings.Join(logs, "\n"))
}

func dataHandler(c *gin.Context) {
    mu.Lock()
    defer mu.Unlock()
    c.JSON(http.StatusOK, data)
}

func runRecon(domain string) {
    var subs []string
    var httpxLines []string

    cmd := exec.Command("subfinder", "-d", domain, "-silent")
    subOut, err := cmd.StdoutPipe()
    if err != nil {
        appendLog("❌ subfinder pipe error: " + err.Error())
        return
    }
    if err := cmd.Start(); err != nil {
        appendLog("❌ Failed to start subfinder: " + err.Error())
        return
    }
    scanner := bufio.NewScanner(subOut)
    for scanner.Scan() {
        subs = append(subs, scanner.Text())
    }
    cmd.Wait()
    appendLog(fmt.Sprintf("📦 Subfinder found %d subdomains", len(subs)))

    httpx := exec.Command("httpx",
    "-p", "80,443,3000,8080",         // scan more ports
    "-sc",                           // include status codes
    "-ip", "-title", "-server",      // include metadata
    "-follow-redirects",             // follow 3xx responses
    "-random-agent",                 // mimic browsers
    "-timeout", "10",                // increase timeout
    "-retries", "2",                 // retry failed hosts
    "-silent",
)

    stdin, _ := httpx.StdinPipe()
    stdout, _ := httpx.StdoutPipe()
    httpx.Start()

    go func() {
        for _, sub := range subs {
            stdin.Write([]byte(sub + "\n"))
        }
        stdin.Close()
    }()

    sc := bufio.NewScanner(stdout)
    for sc.Scan() {
        httpxLines = append(httpxLines, sc.Text())
    }
    httpx.Wait()
    appendLog(fmt.Sprintf("🌐 httpx identified %d live hosts", len(httpxLines)))

    mu.Lock()
    data = ReconData{
        Domain:      domain,
        Subdomains:  subs,
        HttpxOutput: httpxLines,
        Timestamp:   time.Now().Format("02 Jan 2006 15:04:05"),
        Scanning:    false,
    }
    mu.Unlock()

    appendLog("✅ Scan finished for " + domain)
}

.........